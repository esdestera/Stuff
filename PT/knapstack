// A Dynamic Programming based solution for 0-1 Knapsack problem
#include<stdio.h>

// A utility function that returns maximum of two integers
int max(int a, int b) {
  if(a > b)
    return a;
  else
    return b;
}

// Returns the maximum value that can be put in a knapsack of capacity Weight
int knapSack(int weight, int wt[], int val[], int n)
{
   int i, j;
   int K[n+1][weight+1];

   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (j = 0; j <= weight; j++)
       {
           if (i==0 || j==0)
               K[i][j] = 0;
           else if (wt[i-1] <= j)
                 K[i][j] = max(val[i-1] + K[i-1][j-wt[i-1]],  K[i-1][j]);
           else
                 K[i][j] = K[i-1][j];
       }
   }

   return K[n][weight];
}

int main()
{
    int val[] = {60, 100, 120};
    int wt[] = {10, 20, 30};
    int  weight = 50;
    int n = sizeof(val)/sizeof(val[0]);
    printf("%d", knapSack(weight, wt, val, n));
    return 0;
}
